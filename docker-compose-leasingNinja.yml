volumes:
  dqdatabase:
  autohaus-ocelot-config:
  webapp-ocelot-config:
  riskapi-ocelot-config:
  agent-vol:

services:
  ddd-autohaus:
    image: ghcr.io/dqualizer/ddd-autohaus:main
    ports:
      - "${SAMPLE_APPLICATION_PORT}:9000"
    volumes:
      - autohaus-ocelot-config:/app/configuration
      - agent-vol:/agent
    environment:
      - INSPECTIT_CONFIG_FILE_BASED_PATH=/app/configuration
      - INSPECTIT_EXPORTERS_METRICS_OTLP_ENABLED=true
      - INSPECTIT_EXPORTERS_METRICS_OTLP_ENDPOINT=http://otel-collector:4317
      - INSPECTIT_EXPORTERS_METRICS_OTLP_PROTOCOL=grpc
      - INSPECTIT_EXPORTERS_TRACING_OTLP_ENABLED=true
      - INSPECTIT_EXPORTERS_TRACING_OTLP_ENDPOINT=http://otel-collector:4317
      - INSPECTIT_EXPORTERS_TRACING_OTLP_PROTOCOL=grpc
      - INSPECTIT_EXPORTERS_TRACING_SERVICE_NAME=autohaus
    entrypoint:
      [
        "java",
        "-javaagent:/agent/inspectit-ocelot-agent.jar",
        "-cp",
        "app:app/lib/*",
        "ddd.autohaus.tactical.design.WerkstattauftragApplication",
      ]
    depends_on:
      agent:
        condition: service_started

  # Note that running leasingNinja in Docker does NOT allow the application of the unavailability stimulus,
  # as the unavailability stimulus was implemented for host system processes
  leasingNinja-webapp:
    image: ghcr.io/dqualizer/leasing-ninja-webapp:resilience_testing
    ports:
      - "7080:7080"
    volumes:
      - webapp-ocelot-config:/app/configuration
      - agent-vol:/agent
    environment:
      - INSPECTIT_CONFIG_FILE_BASED_PATH=/app/configuration
      - INSPECTIT_EXPORTERS_METRICS_OTLP_ENABLED=true
      - INSPECTIT_EXPORTERS_METRICS_OTLP_ENDPOINT=http://otel-collector:4317
      - INSPECTIT_EXPORTERS_METRICS_OTLP_PROTOCOL=grpc
      - INSPECTIT_EXPORTERS_TRACING_OTLP_ENABLED=true
      - INSPECTIT_EXPORTERS_TRACING_OTLP_ENDPOINT=http://otel-collector:4317
      - INSPECTIT_EXPORTERS_TRACING_OTLP_PROTOCOL=grpc
      - INSPECTIT_EXPORTERS_TRACING_SERVICE_NAME=leasingNinja-webapp
    entrypoint:
      [
        "java",
        "-javaagent:/agent/inspectit-ocelot-agent.jar",
        "-jar",
        "leasingninja-webapp-0.0.1-SNAPSHOT.jar",
        "-Dspring-boot.run.jvmArguments=-enableassertions",
        "-Dspring-boot.run.arguments=--logging.level.io.leasingninja=TRACE"
      ]
    depends_on:
      agent:
        condition: service_started

  # Don't rename this service! It's hardcoded in LeasingNinja-webapp
  leasingNinja-riskapi:
    image: ghcr.io/dqualizer/leasing-ninja-riskapi:resilience_testing
    ports:
      - "7081:7081"
    volumes:
      - riskapi-ocelot-config:/app/configuration
      - agent-vol:/agent
    environment:
      - INSPECTIT_CONFIG_FILE_BASED_PATH=/app/configuration
      - INSPECTIT_EXPORTERS_METRICS_OTLP_ENABLED=true
      - INSPECTIT_EXPORTERS_METRICS_OTLP_ENDPOINT=http://otel-collector:4317
      - INSPECTIT_EXPORTERS_METRICS_OTLP_PROTOCOL=grpc
      - INSPECTIT_EXPORTERS_TRACING_OTLP_ENABLED=true
      - INSPECTIT_EXPORTERS_TRACING_OTLP_ENDPOINT=http://otel-collector:4317
      - INSPECTIT_EXPORTERS_TRACING_OTLP_PROTOCOL=grpc
      - INSPECTIT_EXPORTERS_TRACING_SERVICE_NAME=leasingNinja-riskApi
    entrypoint:
      [
        "java",
        "-javaagent:/agent/inspectit-ocelot-agent.jar",
        "-jar",
        "leasingninja-riskApi-0.0.1-SNAPSHOT.jar",
        "-Dspring-boot.run.jvmArguments=-enableassertions",
        "-Dspring-boot.run.arguments=--logging.level.io.leasingninja=TRACE"
      ]
    depends_on:
      agent:
        condition: service_started

  dqanalyzer:
    image: ghcr.io/dqualizer/dqanalyzer2:main
    restart: unless-stopped
    ports:
      - "${DQANALYZER_PORT}:3000"
    environment:
      - DQAPI_HOST=dqapi:8099
      - DQTRANSLATOR_HOST=dqtranslator:8080

  dqapi:
    image: ghcr.io/dqualizer/dqapi:main
    restart: unless-stopped
    depends_on:
      dqdatabase:
        condition: service_healthy
      rabbit:
        condition: service_healthy
    environment:
      - SPRING_RABBITMQ_ADDRESSES=amqp://${DEMO_USER}:${DEMO_PASS}@rabbit:5672
      - SPRING_DATA_MONGODB_URI=mongodb://${DEMO_USER}:${DEMO_PASS}@dqdatabase:27017/${DATABASE_NAME}?authSource=admin
      - SPRING_DATA_MONGODB_HOST=dqdatabase
      - SPRING_DATA_MONGODB_DATABASE=${DATABASE_NAME}
      - SPRING_DATA_MONGODB_USERNAME=${DEMO_USER}
      - SPRING_DATA_MONGODB_PASSWORD=${DEMO_PASS}
      # configure absolute process paths of your local machine to enable resilience unavailability-stimulus
#      - DQUALIZER_WERKSTATT_PROCESS_PATH=<path>
#      - DQUALIZER_LEASINGNINJA_WEBAPP_PROCESS_PATH=<path>
#      - DQUALIZER_LEASINGNINJA_RISKAPI_PROCESS_PATH=<path>

  dqTranslator:
    image: ghcr.io/dqualizer/dqtranslator:main
    restart: unless-stopped
    environment:
      - SPRING_RABBITMQ_ADDRESSES=amqp://${DEMO_USER}:${DEMO_PASS}@rabbit:5672
      - SPRING_DATA_MONGODB_URI=mongodb://${DEMO_USER}:${DEMO_PASS}@dqdatabase:27017/${DATABASE_NAME}?authSource=admin
      - DQUALIZER_DQAPI_HOST=dqapi
      - DQUALIZER_DQAPI_PORT=8099
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4318
      - INFLUXDB_URL=http://influxdb:8086
      - DOCKER_INFLUXDB_INIT_ORG
      - DOCKER_INFLUXDB_INIT_BUCKET
      - DOCKER_INFLUXDB_INIT_ADMIN_TOKEN
    depends_on:
      dqapi:
        condition: service_healthy

  dqExec:
    image: ghcr.io/dqualizer/dqexec:main
    restart: unless-stopped
    environment:
      - SPRING_RABBITMQ_ADDRESSES=amqp://${DEMO_USER}:${DEMO_PASS}@rabbit:5672
      - SPRING_DATA_MONGODB_URI=mongodb://${DEMO_USER}:${DEMO_PASS}@dqdatabase:27017/${DATABASE_NAME}?authSource=admin
      - INFLUX_HOST=http://influxdb:8086
      - K6_INFLUXDB_ORGANIZATION=${DOCKER_INFLUXDB_INIT_ORG}
      - K6_INFLUXDB_BUCKET=${DOCKER_INFLUXDB_INIT_BUCKET}
      - K6_INFLUXDB_TOKEN=${DOCKER_INFLUXDB_INIT_ADMIN_TOKEN}
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4318
      - DQUALIZER_DQEXEC_DOCKER_LOCALHOST_REPLACEMENT=host.docker.internal
      - DQUALIZER_DQEXEC_INFLUX_URL=http://influxdb:8086
    depends_on:
      dqapi:
        condition: service_healthy
      influxdb:
        condition: service_started
      ddd-autohaus:
        condition: service_started
      leasingNinja-webapp:
        condition: service_started
      leasingNinja-riskapi:
        condition: service_started
      mysql:
        condition: service_started
    volumes:
      - ./docker-output/logging:/app/logs
      - ./docker-output/scripts:/app/loadtest_configurations
      - autohaus-ocelot-config:/app/configuration/autohaus
      - webapp-ocelot-config:/app/configuration/leasingNinja-webapp
      - riskapi-ocelot-config:/app/configuration/leasingNinja-riskApi

  dqdatabase:
    image: mongo
    attach: false
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${DEMO_USER}
      MONGO_INITDB_ROOT_PASSWORD: ${DEMO_PASS}
      MONGO_INITDB_DATABASE: ${DATABASE_NAME}
    volumes:
      - dqdatabase:/data
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh mongodb://${DEMO_USER}:${DEMO_PASS}@localhost:27017/?authSource=admin --quiet
      interval: 5s
      timeout: 10s
      retries: 10
      start_period: 10s

  mongo-express:
    image: mongo-express
    attach: false
    restart: unless-stopped
    ports:
      - "${MONGO_MANAGEMENT_PORT}:8081"
    environment:
      - ME_CONFIG_BASICAUTH_USERNAME=${DEMO_USER}
      - ME_CONFIG_BASICAUTH_PASSWORD=${DEMO_PASS}
      - ME_CONFIG_MONGODB_URL=mongodb://${DEMO_USER}:${DEMO_PASS}@dqdatabase:27017/

  rabbit:
    image: rabbitmq:3-management-alpine
    attach: false
    restart: unless-stopped
    ports:
      - "${RABBIT_MANAGEMENT_PORT}:15672"
    environment:
      - RABBITMQ_DEFAULT_USER=${DEMO_USER}
      - RABBITMQ_DEFAULT_PASS=${DEMO_PASS}
    healthcheck:
      test: rabbitmq-diagnostics check_port_connectivity
      interval: 2s
      timeout: 5s
      retries: 20
      start_period: 5s

  influxdb:
    image: influxdb:2.7-alpine
    attach: false
    restart: unless-stopped
    environment:
      - DOCKER_INFLUXDB_INIT_MODE
      - DOCKER_INFLUXDB_INIT_USERNAME=${DEMO_USER}
      - DOCKER_INFLUXDB_INIT_PASSWORD=${DEMO_PASS}
      - DOCKER_INFLUXDB_INIT_ORG
      - DOCKER_INFLUXDB_INIT_BUCKET
      - DOCKER_INFLUXDB_INIT_ADMIN_TOKEN
    ports:
      - "${INFLUX_PORT}:8086"

  grafana:
    image: ghcr.io/dqualizer/dqcockpit:main
    attach: false
    restart: unless-stopped
    ports:
      - "${GRAFANA_PORT}:3000"
    environment:
      - GF_PANELS_DISABLE_SANITIZE_HTML=TRUE
      - GF_SECURITY_ADMIN_PASSWORD=${DEMO_PASS}
      - GF_PATHS_PROVISIONING=/usr/share/grafana/custom/
      - DOCKER_INFLUXDB_INIT_ORG
      - DOCKER_INFLUXDB_INIT_BUCKET
      - DOCKER_INFLUXDB_INIT_ADMIN_TOKEN
    depends_on:
      - influxdb

  prometheus:
    image: prom/prometheus:v2.53.1
    attach: false
    restart: unless-stopped
    volumes:
      - ./config/prometheus.yaml:/etc/prometheus/prometheus.yml
    ports:
      - "${PROMETHEUS_PORT}:9090"

  jaeger:
    image: jaegertracing/all-in-one:1
    attach: false
    restart: unless-stopped
    ports:
      - "${JAEGER_PORT}:16686"

  otel-collector:
    image: otel/opentelemetry-collector-contrib:0.105.0
    attach: false
    restart: unless-stopped
    command: [ "--config=/etc/otel-collector-config.yaml" ]
    volumes:
      - ./config/otel-collector-config.yaml:/etc/otel-collector-config.yaml
    ports:
      - "${OTEL_HEALTH_PORT}:13133"
    depends_on:
      jaeger:
        condition: service_started
      prometheus:
        condition: service_started
      influxdb:
        condition: service_started

  agent:
    image: inspectit/inspectit-ocelot-agent:2.6.5
    container_name: dqualizer-ocelot-agent
    deploy:
      resources:
        limits:
          memory: 128M
    volumes:
      - agent-vol:/agent

  mysql:
    image: mysql:latest
    attach: false
    restart: unless-stopped
    ports:
      - 3306:3306
    # For real confidentiality define corresponding environment variables in the runtime environment / terminal
    environment:
      MYSQL_ROOT_PASSWORD: "aRootPw"  #${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: "authentication"
      MYSQL_USER: "aDBUser" #${MYSQL_USER}
      MYSQL_PASSWORD: "aDBPw" #${MYSQL_PASSWORD}
    # For real confidentiality delete the volume and setup dqualizer user manually
    volumes:
      - ./docker-input/init.sql:/docker-entrypoint-initdb.d/init.sql
