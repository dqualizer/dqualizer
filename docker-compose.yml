version: "3.9"
services:
  ddd-autohaus:
    image: ghcr.io/dqualizer/dqsamples-ddd-autohaus
    container_name: 01_sample-application
    ports:
      - "${SAMPLE_APPLICATION_PORT}:9000"

  dqAnalyzer:
    image: ghcr.io/dqualizer/dqanalyzer2:main
    container_name: 02_dqanalyzer
    ports:
      - "${DQANALYZER_PORT}:80"
    environment:
      - VITE_BACKEND_URL=http://localhost:${DQAPI_PORT}
    depends_on:
      dqApi:
        condition: service_healthy

  dqApi:
    image: ghcr.io/dqualizer/dqapi:main
    container_name: 03_dqapi
    ports:
      - "${DQAPI_PORT}:8099"
    environment:
      - SPRING_RABBITMQ_HOST=rabbit
      - SPRING_DATA_MONGODB_AUTHENTICATION_DATABASE=admin
      - SPRING_DATA_MONGODB_HOST=dqdatabase
      - SPRING_DATA_MONGODB_PORT=${MONGO_PORT}
      - SPRING_DATA_MONGODB_USERNAME=root
      - SPRING_DATA_MONGODB_PASSWORD=example
      - SPRING_DATA_MONGODB_DATABASE=dqualizer
    healthcheck:
      test: wget --no-verbose --tries=1 --spider localhost:${DQAPI_PORT}/actuator/health || exit 1
      interval: 60s
      start_period: 5s
      retries: 5
      timeout: 10s

  dqTranslator:
    image: ghcr.io/dqualizer/dqtranslator:main
    container_name: 04_dqtranslator
    ports:
      - "${DQTRANSLATOR_PORT}:8080"
    environment:
      - SPRING_RABBITMQ_HOST=rabbit
      - DQUALIZER_DQAPI_HOST=dqApi
      - DQUALIZER_DQAPI_PORT=$DQAPI_PORT
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4317
    depends_on:
      rabbit:
        condition: service_healthy

  dqExec:
    image: ghcr.io/dqualizer/dqexec:main
    container_name: 05_dqexec
    ports:
      - "${DQEXEC_PORT}:8090"
    volumes:
      - ./docker-output/logging:/app/logging
      - ./docker-output/scripts:/app/scripts
    environment:
      - SPRING_RABBITMQ_HOST=rabbit
      - dqualizer.dqexec.influx.host=influxdb
      - dqualizer.dqexec.docker.localhost_replacement=ddd-autohaus
      - K6_INFLUXDB_ORGANIZATION=${DOCKER_INFLUXDB_INIT_ORG}
      - K6_INFLUXDB_BUCKET=${DOCKER_INFLUXDB_INIT_BUCKET}
      - K6_INFLUXDB_TOKEN=${DOCKER_INFLUXDB_INIT_ADMIN_TOKEN}
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4317
    depends_on:
      rabbit:
        condition: service_healthy
      influxdb:
        condition: service_started
      ddd-autohaus:
        condition: service_started

  dqDatabase:
    image: mongo
    container_name: 07_dqdatabase
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
    ports:
      - "${MONGO_PORT}:27017"
    volumes:
      - ./data:/data

  mongo-express:
    image: mongo-express
    container_name: 08_dqdatabase_management
    restart: always
    ports:
      - "${MONGO_MANAGEMENT_PORT}:8081"
    environment:
      - ME_CONFIG_MONGODB_ADMINUSERNAME=root
      - ME_CONFIG_MONGODB_ADMINPASSWORD=example
      - ME_CONFIG_MONGODB_URL=mongodb://root:example@dqDatabase:${MONGO_PORT}/
      - ME_CONFIG_MONGODB_PORT=$MONGO_PORT
      - ME_CONFIG_MONGODB_SERVER=dqDatabase

  rabbit:
    image: rabbitmq:3-management
    container_name: 09_dqrabbit
    user: rabbitmq
    ports:
      - "${RABBIT_PORT}:15672"
      - "${RABBIT_MANAGEMENT_PORT}:5672"
    healthcheck:
      test: rabbitmq-diagnostics check_port_connectivity
      interval: 2s
      timeout: 5s
      retries: 20
      start_period: 5s

  influxdb:
    image: influxdb:2.7.5
    container_name: 10_dqinflux
    environment:
      - DOCKER_INFLUXDB_INIT_MODE
      - DOCKER_INFLUXDB_INIT_USERNAME
      - DOCKER_INFLUXDB_INIT_PASSWORD
      - DOCKER_INFLUXDB_INIT_ORG
      - DOCKER_INFLUXDB_INIT_BUCKET
      - DOCKER_INFLUXDB_INIT_ADMIN_TOKEN
    ports:
      - "${INFLUX_PORT}:8086"

  grafana:
    image: ghcr.io/dqualizer/dqcockpit
    container_name: 06_dqcockpit
    ports:
      - "${GRAFANA_PORT}:3000"
    environment:
      - GF_PANELS_DISABLE_SANITIZE_HTML=TRUE
      - GF_SECURITY_ADMIN_PASSWORD=demo
      - GF_PATHS_PROVISIONING=/usr/share/grafana/custom/
      - DOCKER_INFLUXDB_INIT_ORG
      - DOCKER_INFLUXDB_INIT_BUCKET
      - DOCKER_INFLUXDB_INIT_ADMIN_TOKEN
    depends_on:
      - influxdb

  prometheus:
    container_name: 11_prometheus
    image: prom/prometheus:v2.44.0
    restart: always
    volumes:
      - ./config/prometheus.yaml:/etc/prometheus/prometheus.yml
    ports:
      - "${PROMETHEUS_PORT}:9090"

  jaeger:
    container_name: 12_jaeger
    image: jaegertracing/all-in-one:1.45
    restart: always
    ports:
      - "${JAEGER_PORT}:16686"

  otel-collector:
    container_name: 13_otel_collector
    image: otel/opentelemetry-collector:0.67.0
    restart: always
    command: [ "--config=/etc/otel-collector-config.yaml" ]
    volumes:
      - ./config/otel-collector-config.yaml:/etc/otel-collector-config.yaml
    ports:
      - "${OTEL_SELFMETRICS_PORT}:8888"
      - "${OTEL_METRICS_PORT}:8889" 
      - "${OTEL_HEALTH_PORT}:13133"
    depends_on:
      jaeger:
        condition: service_started
      prometheus:
        condition: service_started
