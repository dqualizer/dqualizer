volumes:
  dqdatabase:

services:
  ddd-autohaus:
    image: ghcr.io/dqualizer/ddd-autohaus:main
    ports:
      - "${SAMPLE_APPLICATION_PORT}:9000"

  dqanalyzer:
    image: ghcr.io/dqualizer/dqanalyzer2:nextjs
    restart: unless-stopped
    ports:
      - "${DQANALYZER_PORT}:3000"
    environment:
      - DQAPI_HOST=dqapi:8099
      - DQTRANSLATOR_HOST=dqtranslator:8080

  dqapi:
    image: ghcr.io/dqualizer/dqapi:kotlin
    restart: unless-stopped
    depends_on:
      dqdatabase:
        condition: service_healthy
      rabbit:
        condition: service_healthy
    environment:
      - SPRING_RABBITMQ_ADDRESSES=amqp://${DEMO_USER}:${DEMO_PASS}@rabbit:5672
      - SPRING_DATA_MONGODB_URI=mongodb://${DEMO_USER}:${DEMO_PASS}@dqdatabase:27017/${DATABASE_NAME}?authSource=admin
      - SPRING_DATA_MONGODB_HOST=dqdatabase
      - SPRING_DATA_MONGODB_DATABASE=${DATABASE_NAME}
      - SPRING_DATA_MONGODB_USERNAME=${DEMO_USER}
      - SPRING_DATA_MONGODB_PASSWORD=${DEMO_PASS}

  # dqEdit:
  #   image: ghcr.io/dqualizer/dqedit-react:react-dev
  #   restart: unless-stopped
  #   ports:
  #     - "${DQEDIT_PORT}:3000"

  dqTranslator:
    image: ghcr.io/dqualizer/dqtranslator:instrumentation
    restart: unless-stopped
    environment:
      - SPRING_RABBITMQ_ADDRESSES=amqp://${DEMO_USER}:${DEMO_PASS}@rabbit:5672
      - SPRING_DATA_MONGODB_URI=mongodb://${DEMO_USER}:${DEMO_PASS}@dqdatabase:27017/${DATABASE_NAME}?authSource=admin
      - DQUALIZER_DQAPI_HOST=dqapi
      - DQUALIZER_DQAPI_PORT=8099
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4318
      - INFLUXDB_URL=http://influxdb:8086
      - DOCKER_INFLUXDB_INIT_ORG
      - DOCKER_INFLUXDB_INIT_BUCKET
      - DOCKER_INFLUXDB_INIT_ADMIN_TOKEN
    depends_on:
      dqapi:
        condition: service_healthy

  dqExec:
    image: ghcr.io/dqualizer/dqexec:instrumentation
    restart: unless-stopped
    environment:
      - SPRING_RABBITMQ_ADDRESSES=amqp://${DEMO_USER}:${DEMO_PASS}@rabbit:5672
      - SPRING_DATA_MONGODB_URI=mongodb://${DEMO_USER}:${DEMO_PASS}@dqdatabase:27017/${DATABASE_NAME}?authSource=admin
      - INFLUX_HOST=http://influxdb:8086
      - K6_INFLUXDB_ORGANIZATION=${DOCKER_INFLUXDB_INIT_ORG}
      - K6_INFLUXDB_BUCKET=${DOCKER_INFLUXDB_INIT_BUCKET}
      - K6_INFLUXDB_TOKEN=${DOCKER_INFLUXDB_INIT_ADMIN_TOKEN}
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4318
      - dqualizer.dqexec.docker.localhost_replacement=ddd-autohaus
      - DQUALIZER_DQEXEC_INFLUX_URL=http://influxdb:8086
    depends_on:
      dqapi:
        condition: service_healthy
      influxdb:
        condition: service_started
      ddd-autohaus:
        condition: service_started

  dqdatabase:
    image: mongo
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${DEMO_USER}
      MONGO_INITDB_ROOT_PASSWORD: ${DEMO_PASS}
      MONGO_INITDB_DATABASE: ${DATABASE_NAME}
    # volumes:
      # - dqdatabase:/data
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh mongodb://${DEMO_USER}:${DEMO_PASS}@localhost:27017/?authSource=admin --quiet
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    attach: false

  mongo-express:
    image: mongo-express
    restart: always
    ports:
      - "${MONGO_MANAGEMENT_PORT}:8081"
    environment:
      - ME_CONFIG_BASICAUTH_USERNAME=${DEMO_USER}
      - ME_CONFIG_BASICAUTH_PASSWORD=${DEMO_PASS}
      - ME_CONFIG_MONGODB_URL=mongodb://${DEMO_USER}:${DEMO_PASS}@dqdatabase:27017/
    attach: false

  rabbit:
    image: rabbitmq:3-management
    user: rabbitmq
    ports:
      - "${RABBIT_MANAGEMENT_PORT}:15672"
    environment:
      - RABBITMQ_DEFAULT_USER=${DEMO_USER}
      - RABBITMQ_DEFAULT_PASS=${DEMO_PASS}
    healthcheck:
      test: rabbitmq-diagnostics check_port_connectivity
      interval: 2s
      timeout: 5s
      retries: 20
      start_period: 5s
    attach: false

  influxdb:
    image: influxdb:2.7.5
    environment:
      - DOCKER_INFLUXDB_INIT_MODE
      - DOCKER_INFLUXDB_INIT_USERNAME=${DEMO_USER}
      - DOCKER_INFLUXDB_INIT_PASSWORD=${DEMO_PASS}
      - DOCKER_INFLUXDB_INIT_ORG
      - DOCKER_INFLUXDB_INIT_BUCKET
      - DOCKER_INFLUXDB_INIT_ADMIN_TOKEN
    attach: false

  grafana:
    image: ghcr.io/dqualizer/dqcockpit:update-cd
    ports:
      - "${GRAFANA_PORT}:3000"
    environment:
      - GF_PANELS_DISABLE_SANITIZE_HTML=TRUE
      - GF_SECURITY_ADMIN_PASSWORD=${DEMO_PASS}
      - GF_PATHS_PROVISIONING=/usr/share/grafana/custom/
      - DOCKER_INFLUXDB_INIT_ORG
      - DOCKER_INFLUXDB_INIT_BUCKET
      - DOCKER_INFLUXDB_INIT_ADMIN_TOKEN
    depends_on:
      - influxdb
    attach: false

  prometheus:
    image: prom/prometheus:v2.44.0
    restart: always
    volumes:
      - ./config/prometheus.yaml:/etc/prometheus/prometheus.yml
    ports:
      - "${PROMETHEUS_PORT}:9090"
    attach: false

  jaeger:
    image: jaegertracing/all-in-one:1
    restart: always
    ports:
      - "${JAEGER_PORT}:16686"
    attach: false

  otel-collector:
    image: otel/opentelemetry-collector:0.101.0
    restart: always
    command: [ "--config=/etc/otel-collector-config.yaml" ]
    volumes:
      - ./config/otel-collector-config.yaml:/etc/otel-collector-config.yaml
    ports:
      - "${OTEL_HEALTH_PORT}:13133"
    depends_on:
      jaeger:
        condition: service_started
      prometheus:
        condition: service_started
    attach: false
